using System;
using System.Collections.Generic;
using System.Threading.Tasks;

public interface IObserver
{
    Task UpdateAsync(CurrencyPair currencyPair);
    string GetName();
}

public interface ISubject
{
    void RegisterObserver(IObserver observer);
    void RemoveObserver(IObserver observer);
    Task NotifyObserversAsync(CurrencyPair currencyPair);
    string GetSubjectName();
}

public class CurrencyPair
{
    public string BaseCurrency { get; set; }
    public string TargetCurrency { get; set; }
    public decimal ExchangeRate { get; set; }
    public decimal PreviousRate { get; set; }
    public decimal ChangePercent { get; set; }
    public DateTime LastUpdated { get; set; }

    public CurrencyPair(string baseCurrency, string targetCurrency, decimal exchangeRate, decimal previousRate)
    {
        BaseCurrency = baseCurrency;
        TargetCurrency = targetCurrency;
        ExchangeRate = exchangeRate;
        PreviousRate = previousRate;
        ChangePercent = previousRate != 0 ? ((exchangeRate - previousRate) / previousRate) * 100 : 0;
        LastUpdated = DateTime.Now;
    }

    public string GetPairSymbol()
    {
        return $"{BaseCurrency}/{TargetCurrency}";
    }

    public override string ToString()
    {
        string trend = ChangePercent >= 0 ? "üìà" : "üìâ";
        return $"{GetPairSymbol()} {ExchangeRate:F4} ({trend} {Math.Abs(ChangePercent):F2}%)";
    }
}

public class CurrencyExchange : ISubject
{
    private List<IObserver> _observers;
    private Dictionary<string, decimal> _exchangeRates;
    private Dictionary<string, decimal> _previousRates;
    public string Name { get; private set; }

    public CurrencyExchange(string name)
    {
        Name = name;
        _observers = new List<IObserver>();
        _exchangeRates = new Dictionary<string, decimal>();
        _previousRates = new Dictionary<string, decimal>();
        
        InitializeDefaultRates();
    }

    private void InitializeDefaultRates()
    {
        _exchangeRates["USD/RUB"] = 92.50m;
        _exchangeRates["EUR/RUB"] = 99.80m;
        _exchangeRates["USD/EUR"] = 0.93m;
        _exchangeRates["GBP/RUB"] = 115.20m;
        _exchangeRates["CNY/RUB"] = 12.80m;
        
        foreach (var rate in _exchangeRates)
        {
            _previousRates[rate.Key] = rate.Value;
        }
    }

    public string GetSubjectName() => Name;

    public void RegisterObserver(IObserver observer)
    {
        if (observer == null)
            throw new ArgumentNullException(nameof(observer));

        if (!_observers.Contains(observer))
        {
            _observers.Add(observer);
            Console.WriteLine($"‚úÖ {observer.GetName()} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {Name}");
        }
    }

    public void RemoveObserver(IObserver observer)
    {
        if (observer == null)
            throw new ArgumentNullException(nameof(observer));

        if (_observers.Contains(observer))
        {
            _observers.Remove(observer);
            Console.WriteLine($"‚ùå {observer.GetName()} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π {Name}");
        }
        else
        {
            Console.WriteLine($"‚ö†Ô∏è  –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å {observer.GetName()} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤");
        }
    }

    public async Task NotifyObserversAsync(CurrencyPair currencyPair)
    {
        if (_observers.Count == 0)
            return;

        Console.WriteLine($"\nüîî {Name} —É–≤–µ–¥–æ–º–ª—è–µ—Ç {_observers.Count} –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ {currencyPair.GetPairSymbol()}");

        var tasks = new List<Task>();
        foreach (var observer in _observers)
        {
            tasks.Add(observer.UpdateAsync(currencyPair));
        }

        await Task.WhenAll(tasks);
    }

    public async Task UpdateExchangeRate(string pair, decimal newRate)
    {
        if (string.IsNullOrEmpty(pair))
            throw new ArgumentException("–ü–∞—Ä–∞ –≤–∞–ª—é—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π");

        if (newRate <= 0)
            throw new ArgumentException("–ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");

        if (!_exchangeRates.ContainsKey(pair))
        {
            _exchangeRates[pair] = newRate;
            _previousRates[pair] = newRate;
            Console.WriteLine($"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {pair} = {newRate:F4}");
            return;
        }

        decimal oldRate = _exchangeRates[pair];
        
        if (oldRate == newRate)
            return;

        _previousRates[pair] = oldRate;
        _exchangeRates[pair] = newRate;

        var currencyPair = new CurrencyPair(
            pair.Split('/')[0],
            pair.Split('/')[1],
            newRate,
            oldRate
        );

        Console.WriteLine($"\n=== –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–∞ {Name} ===");
        Console.WriteLine($"{pair}: {oldRate:F4} ‚Üí {newRate:F4} " +
                         $"({(newRate > oldRate ? "‚Üë" : "‚Üì")} {Math.Abs(currencyPair.ChangePercent):F2}%)");

        await NotifyObserversAsync(currencyPair);
    }

    public decimal GetCurrentRate(string pair)
    {
        return _exchangeRates.ContainsKey(pair) ? _exchangeRates[pair] : 0;
    }

    public void DisplayCurrentRates()
    {
        Console.WriteLine($"\n=== –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –Ω–∞ {Name} ===");
        foreach (var rate in _exchangeRates)
        {
            decimal previous = _previousRates[rate.Key];
            decimal change = previous != 0 ? ((rate.Value - previous) / previous) * 100 : 0;
            string trend = change >= 0 ? "üìà" : "üìâ";
            Console.WriteLine($"{rate.Key}: {rate.Value:F4} ({trend} {Math.Abs(change):F2}%)");
        }
    }

    public void DisplaySubscribers()
    {
        Console.WriteLine($"\n=== –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ {Name} ===");
        if (_observers.Count == 0)
        {
            Console.WriteLine("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤");
            return;
        }

        foreach (var observer in _observers)
        {
            Console.WriteLine($"‚Ä¢ {observer.GetName()}");
        }
    }
}

public class MobileAppObserver : IObserver
{
    public string AppName { get; private set; }
    private List<string> _notifications;

    public MobileAppObserver(string appName)
    {
        AppName = appName;
        _notifications = new List<string>();
    }

    public string GetName() => $"–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{AppName}'";

    public async Task UpdateAsync(CurrencyPair currencyPair)
    {
        await Task.Run(() =>
        {
            string notification = $"{DateTime.Now:HH:mm:ss} - {currencyPair}";
            _notifications.Add(notification);
            
            string emoji = currencyPair.ChangePercent >= 1 ? "üöÄ" : 
                          currencyPair.ChangePercent <= -1 ? "üîª" : "‚ö°";
            
            Console.WriteLine($"   üì± {AppName}: {emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - {currencyPair}");
            
            if (Math.Abs(currencyPair.ChangePercent) > 2)
            {
                Console.WriteLine($"   üí∞ {AppName}: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!");
            }
        });
    }

    public void DisplayNotifications()
    {
        Console.WriteLine($"\n=== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {AppName} ===");
        if (_notifications.Count == 0)
        {
            Console.WriteLine("–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
            return;
        }

        foreach (var notification in _notifications)
        {
            Console.WriteLine($"‚Ä¢ {notification}");
        }
    }
}

public class EmailNotificationObserver : IObserver
{
    public string Email { get; private set; }
    private List<string> _sentEmails;

    public EmailNotificationObserver(string email)
    {
        Email = email;
        _sentEmails = new List<string>();
    }

    public string GetName() => $"Email —Ä–∞—Å—Å—ã–ª–∫–∞ '{Email}'";

    public async Task UpdateAsync(CurrencyPair currencyPair)
    {
        await Task.Run(() =>
        {
            string subject = Math.Abs(currencyPair.ChangePercent) > 1 ? 
                "–í–ê–ñ–ù–û: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!" : "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç";
            
            string body = $"–ö—É—Ä—Å {currencyPair.GetPairSymbol()} –∏–∑–º–µ–Ω–∏–ª—Å—è: {currencyPair.PreviousRate:F4} ‚Üí {currencyPair.ExchangeRate:F4}\n" +
                         $"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {currencyPair.ChangePercent:F2}%\n" +
                         $"–í—Ä–µ–º—è: {currencyPair.LastUpdated:HH:mm:ss}";

            _sentEmails.Add($"{currencyPair.LastUpdated:yyyy-MM-dd} - {currencyPair.GetPairSymbol()}");

            Console.WriteLine($"   üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {Email}: {subject}");
            Console.WriteLine($"   üíå –¢–µ–∫—Å—Ç: {currencyPair.GetPairSymbol()} = {currencyPair.ExchangeRate:F4} ({currencyPair.ChangePercent:+#.##;-#.##;0}%)");
        });
    }

    public void DisplaySentEmails()
    {
        Console.WriteLine($"\n=== –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ emails –Ω–∞ {Email} ===");
        foreach (var email in _sentEmails)
        {
            Console.WriteLine($"‚Ä¢ {email}");
        }
    }
}

public class TradingBotObserver : IObserver
{
    public string BotName { get; private set; }
    private Dictionary<string, (decimal buyThreshold, decimal sellThreshold)> _tradingRules;
    private List<string> _tradingActions;

    public TradingBotObserver(string botName)
    {
        BotName = botName;
        _tradingRules = new Dictionary<string, (decimal, decimal)>();
        _tradingActions = new List<string>();
        
        InitializeDefaultRules();
    }

    private void InitializeDefaultRules()
    {
        _tradingRules["USD/RUB"] = (90.00m, 95.00m);
        _tradingRules["EUR/RUB"] = (98.00m, 102.00m);
        _tradingRules["USD/EUR"] = (0.90m, 0.96m);
    }

    public string GetName() => $"–¢–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç '{BotName}'";

    public void SetTradingRule(string pair, decimal buyThreshold, decimal sellThreshold)
    {
        _tradingRules[pair] = (buyThreshold, sellThreshold);
    }

    public async Task UpdateAsync(CurrencyPair currencyPair)
    {
        await Task.Run(() =>
        {
            string pair = currencyPair.GetPairSymbol();
            
            if (!_tradingRules.ContainsKey(pair))
                return;

            var (buyThreshold, sellThreshold) = _tradingRules[pair];
            string action = "";

            if (currencyPair.ExchangeRate <= buyThreshold)
            {
                action = $"–ü–û–ö–£–ü–ö–ê {pair} –ø–æ {currencyPair.ExchangeRate:F4} (–Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ {buyThreshold:F4})";
                Console.WriteLine($"   ü§ñ {BotName}: üü¢ {action}");
            }
            else if (currencyPair.ExchangeRate >= sellThreshold)
            {
                action = $"–ü–†–û–î–ê–ñ–ê {pair} –ø–æ {currencyPair.ExchangeRate:F4} (–≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ {sellThreshold:F4})";
                Console.WriteLine($"   ü§ñ {BotName}: üî¥ {action}");
            }
            else
            {
                action = $"–ù–ê–ë–õ–Æ–î–ï–ù–ò–ï {pair} = {currencyPair.ExchangeRate:F4}";
                Console.WriteLine($"   ü§ñ {BotName}: ‚ö™ {action}");
            }

            _tradingActions.Add($"{DateTime.Now:HH:mm:ss} - {action}");
        });
    }

    public void DisplayTradingActions()
    {
        Console.WriteLine($"\n=== –î–µ–π—Å—Ç–≤–∏—è —Ä–æ–±–æ—Ç–∞ {BotName} ===");
        foreach (var action in _tradingActions)
        {
            Console.WriteLine($"‚Ä¢ {action}");
        }
    }
}

public class AnalyticsDisplayObserver : IObserver
{
    public string DisplayName { get; private set; }
    private List<CurrencyPair> _history;

    public AnalyticsDisplayObserver(string displayName)
    {
        DisplayName = displayName;
        _history = new List<CurrencyPair>();
    }

    public string GetName() => $"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∏—Å–ø–ª–µ–π '{DisplayName}'";

    public async Task UpdateAsync(CurrencyPair currencyPair)
    {
        await Task.Run(() =>
        {
            _history.Add(currencyPair);
            
            string trend = currencyPair.ChangePercent >= 0 ? "—Ä–æ—Å—Ç" : "–ø–∞–¥–µ–Ω–∏–µ";
            string color = Math.Abs(currencyPair.ChangePercent) > 1 ? "üî¥" : "üü°";
            
            if (Math.Abs(currencyPair.ChangePercent) > 2)
                color = "üö®";

            Console.WriteLine($"   üìä {DisplayName}: {color} {currencyPair.GetPairSymbol()} - {trend} –Ω–∞ {Math.Abs(currencyPair.ChangePercent):F2}%");
            Console.WriteLine($"   üìà {DisplayName}: –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {currencyPair.GetPairSymbol()}");

            if (_history.Count >= 2)
            {
                var lastTwo = _history.GetRange(_history.Count - 2, 2);
                decimal acceleration = lastTwo[1].ChangePercent - lastTwo[0].ChangePercent;
                
                if (Math.Abs(acceleration) > 0.5m)
                {
                    Console.WriteLine($"   ‚ö° {DisplayName}: –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ {acceleration:+#.##;-#.##;0}%");
                }
            }
        });
    }

    public void DisplayAnalysis()
    {
        Console.WriteLine($"\n=== –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ {DisplayName} ===");
        if (_history.Count == 0)
        {
            Console.WriteLine("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
            return;
        }

        var lastUpdate = _history[^1];
        Console.WriteLine($"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdate.GetPairSymbol()} = {lastUpdate.ExchangeRate:F4}");
        Console.WriteLine($"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {_history.Count}");
    }
}

class CurrencyObserverProgram
{
    static async Task Main(string[] args)
    {
        Console.WriteLine("=== –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç ===\n");

        CurrencyExchange exchange = new CurrencyExchange("–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ë–∏—Ä–∂–∞");

        MobileAppObserver mobileApp = new MobileAppObserver("–ú–æ–π–¢—Ä–µ–π–¥–µ—Ä");
        EmailNotificationObserver emailNotifier = new EmailNotificationObserver("trader@example.com");
        TradingBotObserver tradingBot = new TradingBotObserver("AlphaTrader");
        AnalyticsDisplayObserver analyticsDisplay = new AnalyticsDisplayObserver("–¢–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª");

        exchange.RegisterObserver(mobileApp);
        exchange.RegisterObserver(emailNotifier);
        exchange.RegisterObserver(tradingBot);

        exchange.DisplayCurrentRates();
        exchange.DisplaySubscribers();

        Console.WriteLine("\n=== –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ ===");

        Random random = new Random();
        
        for (int i = 0; i < 8; i++)
        {
            string[] pairs = { "USD/RUB", "EUR/RUB", "USD/EUR", "GBP/RUB", "CNY/RUB" };
            string randomPair = pairs[random.Next(pairs.Length)];
            
            decimal currentRate = exchange.GetCurrentRate(randomPair);
            decimal change = (decimal)(random.NextDouble() - 0.5) * 2;
            decimal newRate = Math.Max(0.1m, currentRate + change);

            await exchange.UpdateExchangeRate(randomPair, newRate);
            
            await Task.Delay(1500);
        }

        Console.WriteLine("\n=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è ===");
        exchange.RegisterObserver(analyticsDisplay);

        Console.WriteLine("\n=== –£–¥–∞–ª–µ–Ω–∏–µ email –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è ===");
        exchange.RemoveObserver(emailNotifier);

        await exchange.UpdateExchangeRate("USD/RUB", 94.80m);
        await exchange.UpdateExchangeRate("EUR/RUB", 101.20m);

        Console.WriteLine("\n=== –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===");
        exchange.DisplayCurrentRates();
        exchange.DisplaySubscribers();

        mobileApp.DisplayNotifications();
        emailNotifier.DisplaySentEmails();
        tradingBot.DisplayTradingActions();
        analyticsDisplay.DisplayAnalysis();

        Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
        Console.ReadKey();
    }
}
