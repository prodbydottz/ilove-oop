using System;
using System.Collections.Generic;

public interface IPaymentStrategy
{
    bool ProcessPayment(decimal amount);
    string GetPaymentDetails();
}

public class CreditCardPaymentStrategy : IPaymentStrategy
{
    private string _cardNumber;
    private string _cardHolder;
    private string _cvv;
    private string _expiryDate;

    public CreditCardPaymentStrategy(string cardNumber, string cardHolder, string cvv, string expiryDate)
    {
        if (string.IsNullOrEmpty(cardNumber) || cardNumber.Length != 16)
            throw new ArgumentException("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä");
        
        if (string.IsNullOrEmpty(cardHolder))
            throw new ArgumentException("–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
        
        if (string.IsNullOrEmpty(cvv) || cvv.Length != 3)
            throw new ArgumentException("CVV –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Ü–∏—Ñ—Ä—ã");
        
        if (string.IsNullOrEmpty(expiryDate))
            throw new ArgumentException("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

        _cardNumber = cardNumber;
        _cardHolder = cardHolder;
        _cvv = cvv;
        _expiryDate = expiryDate;
    }

    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –Ω–∞ —Å—É–º–º—É {amount:C}");
        
        if (amount <= 0)
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
            return false;
        }

        if (amount > 10000)
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∫–∞—Ä—Ç–µ");
            return false;
        }

        Console.WriteLine($"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount:C} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É {MaskCardNumber(_cardNumber)}");
        return true;
    }

    public string GetPaymentDetails()
    {
        return $"–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: {MaskCardNumber(_cardNumber)}, –¥–µ—Ä–∂–∞—Ç–µ–ª—å: {_cardHolder}";
    }

    private string MaskCardNumber(string cardNumber)
    {
        return $"****-****-****-{cardNumber.Substring(12)}";
    }
}

public class PayPalPaymentStrategy : IPaymentStrategy
{
    private string _email;
    private string _password;

    public PayPalPaymentStrategy(string email, string password)
    {
        if (string.IsNullOrEmpty(email) || !email.Contains("@"))
            throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å");
        
        if (string.IsNullOrEmpty(password) || password.Length < 6)
            throw new ArgumentException("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");

        _email = email;
        _password = password;
    }

    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ PayPal –Ω–∞ —Å—É–º–º—É {amount:C}");
        
        if (amount <= 0)
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
            return false;
        }

        Console.WriteLine($"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {_email}...");
        
        if (_email.Contains("test"))
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PayPal");
            return false;
        }

        Console.WriteLine($"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount:C} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ PayPal –∞–∫–∫–∞—É–Ω—Ç {_email}");
        return true;
    }

    public string GetPaymentDetails()
    {
        return $"PayPal –∞–∫–∫–∞—É–Ω—Ç: {_email}";
    }
}

public class CryptoPaymentStrategy : IPaymentStrategy
{
    private string _walletAddress;
    private string _cryptoType;

    public CryptoPaymentStrategy(string walletAddress, string cryptoType = "BTC")
    {
        if (string.IsNullOrEmpty(walletAddress) || walletAddress.Length < 26)
            throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞");
        
        if (string.IsNullOrEmpty(cryptoType))
            throw new ArgumentException("–¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

        _walletAddress = walletAddress;
        _cryptoType = cryptoType.ToUpper();
    }

    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ {_cryptoType} –Ω–∞ —Å—É–º–º—É {amount:C}");
        
        if (amount <= 0)
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
            return false;
        }

        if (amount < 0.01m)
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã");
            return false;
        }

        Console.WriteLine($"üîó –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...");
        Console.WriteLine($"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ {amount:C} –Ω–∞ –∞–¥—Ä–µ—Å {MaskWalletAddress(_walletAddress)}");
        
        Console.WriteLine($"‚úÖ –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount:C} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ {_cryptoType}");
        return true;
    }

    public string GetPaymentDetails()
    {
        return $"–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫ {_cryptoType}: {MaskWalletAddress(_walletAddress)}";
    }

    private string MaskWalletAddress(string address)
    {
        if (address.Length <= 8)
            return address;
        
        return $"{address.Substring(0, 4)}...{address.Substring(address.Length - 4)}";
    }
}

public class BankTransferPaymentStrategy : IPaymentStrategy
{
    private string _accountNumber;
    private string _bankName;
    private string _recipientName;

    public BankTransferPaymentStrategy(string accountNumber, string bankName, string recipientName)
    {
        if (string.IsNullOrEmpty(accountNumber) || accountNumber.Length < 5)
            throw new ArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞");
        
        if (string.IsNullOrEmpty(bankName))
            throw new ArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
        
        if (string.IsNullOrEmpty(recipientName))
            throw new ArgumentException("–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");

        _accountNumber = accountNumber;
        _bankName = bankName;
        _recipientName = recipientName;
    }

    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Å—É–º–º—É {amount:C}");
        
        if (amount <= 0)
        {
            Console.WriteLine("‚ùå –û—à–∏–±–∫–∞: –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
            return false;
        }

        if (amount > 50000)
        {
            Console.WriteLine("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞");
        }

        Console.WriteLine($"üè¶ –ü–µ—Ä–µ–≤–æ–¥ {amount:C} –≤ –±–∞–Ω–∫ {_bankName} –Ω–∞ —Å—á–µ—Ç {MaskAccountNumber(_accountNumber)}");
        Console.WriteLine($"‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {amount:C} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
        return true;
    }

    public string GetPaymentDetails()
    {
        return $"–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥: {_bankName}, —Å—á–µ—Ç: {MaskAccountNumber(_accountNumber)}, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {_recipientName}";
    }

    private string MaskAccountNumber(string accountNumber)
    {
        if (accountNumber.Length <= 4)
            return accountNumber;
        
        return $"**{accountNumber.Substring(accountNumber.Length - 4)}";
    }
}

public class PaymentContext
{
    private IPaymentStrategy _paymentStrategy;

    public void SetPaymentStrategy(IPaymentStrategy strategy)
    {
        _paymentStrategy = strategy ?? throw new ArgumentNullException(nameof(strategy), "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø–ª–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
    }

    public bool ExecutePayment(decimal amount)
    {
        if (_paymentStrategy == null)
        {
            throw new InvalidOperationException("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø–ª–∞—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.");
        }

        if (amount <= 0)
        {
            throw new ArgumentException("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π", nameof(amount));
        }

        Console.WriteLine($"\n=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ===");
        Console.WriteLine($"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {_paymentStrategy.GetPaymentDetails()}");
        Console.WriteLine($"–°—É–º–º–∞: {amount:C}");

        bool result = _paymentStrategy.ProcessPayment(amount);

        Console.WriteLine(result ? "üéâ –ü–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!" : "üí• –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª");
        Console.WriteLine("=== –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ===\n");

        return result;
    }

    public string GetCurrentPaymentMethod()
    {
        return _paymentStrategy?.GetPaymentDetails() ?? "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω";
    }
}

class PaymentSystemProgram
{
    static void Main(string[] args)
    {
        Console.WriteLine("=== –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π ===");
        
        PaymentContext paymentContext = new PaymentContext();
        bool continueProcessing = true;

        while (continueProcessing)
        {
            try
            {
                Console.WriteLine("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:");
                Console.WriteLine("1 - –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞");
                Console.WriteLine("2 - PayPal");
                Console.WriteLine("3 - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞");
                Console.WriteLine("4 - –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥");
                Console.WriteLine("0 - –í—ã—Ö–æ–¥");
                Console.Write("–í–∞—à –≤—ã–±–æ—Ä: ");

                string choice = Console.ReadLine();

                if (choice == "0")
                {
                    continueProcessing = false;
                    continue;
                }

                IPaymentStrategy strategy = null;

                switch (choice)
                {
                    case "1":
                        strategy = CreateCreditCardStrategy();
                        break;
                    case "2":
                        strategy = CreatePayPalStrategy();
                        break;
                    case "3":
                        strategy = CreateCryptoStrategy();
                        break;
                    case "4":
                        strategy = CreateBankTransferStrategy();
                        break;
                    default:
                        Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                        continue;
                }

                if (strategy != null)
                {
                    paymentContext.SetPaymentStrategy(strategy);
                    
                    Console.Write("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞: ");
                    if (decimal.TryParse(Console.ReadLine(), out decimal amount) && amount > 0)
                    {
                        paymentContext.ExecutePayment(amount);
                    }
                    else
                    {
                        Console.WriteLine("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"üí• –û—à–∏–±–∫–∞: {ex.Message}");
            }

            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
            Console.Clear();
        }

        Console.WriteLine("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã!");
    }

    static CreditCardPaymentStrategy CreateCreditCardStrategy()
    {
        Console.WriteLine("\n--- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã ---");
        Console.Write("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä): ");
        string cardNumber = Console.ReadLine();
        
        Console.Write("–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã: ");
        string cardHolder = Console.ReadLine();
        
        Console.Write("CVV –∫–æ–¥ (3 —Ü–∏—Ñ—Ä—ã): ");
        string cvv = Console.ReadLine();
        
        Console.Write("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (MM/YY): ");
        string expiryDate = Console.ReadLine();

        return new CreditCardPaymentStrategy(cardNumber, cardHolder, cvv, expiryDate);
    }

    static PayPalPaymentStrategy CreatePayPalStrategy()
    {
        Console.WriteLine("\n--- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö PayPal ---");
        Console.Write("Email: ");
        string email = Console.ReadLine();
        
        Console.Write("–ü–∞—Ä–æ–ª—å: ");
        string password = Console.ReadLine();

        return new PayPalPaymentStrategy(email, password);
    }

    static CryptoPaymentStrategy CreateCryptoStrategy()
    {
        Console.WriteLine("\n--- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ ---");
        Console.Write("–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ");
        string walletAddress = Console.ReadLine();
        
        Console.Write("–¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (BTC/ETH/USDT): ");
        string cryptoType = Console.ReadLine();

        return new CryptoPaymentStrategy(walletAddress, cryptoType);
    }

    static BankTransferPaymentStrategy CreateBankTransferStrategy()
    {
        Console.WriteLine("\n--- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ ---");
        Console.Write("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: ");
        string accountNumber = Console.ReadLine();
        
        Console.Write("–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: ");
        string bankName = Console.ReadLine();
        
        Console.Write("–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ");
        string recipientName = Console.ReadLine();

        return new BankTransferPaymentStrategy(accountNumber, bankName, recipientName);
    }
}
