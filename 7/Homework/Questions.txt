1. –ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "–ü–æ—Å—Ä–µ–¥–Ω–∏–∫" –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ?

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "–ü–æ—Å—Ä–µ–¥–Ω–∏–∫" –≤ —Å–∏—Å—Ç–µ–º–µ —á–∞—Ç–∞:

### üîó **–°–Ω–∏–∂–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (Loose Coupling)**
```csharp
// –ë–ï–ó –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞ - –ø—Ä—è–º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
public class User
{
    private List<User> _contacts;
    public void SendMessage(string message, User recipient)
    {
        recipient.ReceiveMessage(message, this.Name);
        // –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –æ –¥—Ä—É–≥–∏—Ö
    }
}

// –° –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
public class ChatRoom : IMediator
{
    public void SendMessage(string message, User sender)
    {
        foreach (var user in _users.Values)
        {
            if (user != sender)
                user.Receive(message, sender.Name);
        }
    }
}
```

### üéØ **–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–æ–π**
```csharp
public class ChatRoom : IMediator
{
    // –í—Å—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    public void SendPrivateMessage(string message, User sender, string recipientName)
    {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!_users.ContainsKey(sender.Name))
            throw new InvalidOperationException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        
        if (!_users.ContainsKey(recipientName))
            throw new InvalidOperationException("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        
        // –õ–æ–≥–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        _users[recipientName].ReceivePrivate(message, sender.Name);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        _messageHistory.Add($"[–õ–°] {sender.Name} ‚Üí {recipientName}: {message}");
    }
}
```

### üìä **–õ–µ–≥–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**
```csharp
public class ChatRoom : IMediator
{
    public void DisplayUserList()
    {
        Console.WriteLine($"–£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞: {_users.Count}");
        foreach (var user in _users.Values)
        {
            Console.WriteLine($"‚Ä¢ {user.Name}");
        }
    }
    
    public void DisplayChatHistory()
    {
        foreach (var message in _messageHistory.TakeLast(20))
        {
            Console.WriteLine(message);
        }
    }
}
```

### üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å**
```csharp
public void SendMessage(string message, User sender)
{
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (sender is BannedUser)
        throw new InvalidOperationException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (ContainsForbiddenWords(message))
    {
        message = FilterMessage(message);
        NotifyAdmin($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender.Name} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    }
    
    // –î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    foreach (var user in _users.Values.Where(u => u != sender))
    {
        user.Receive(message, sender.Name);
    }
}
```

## 2. –ö–∞–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –∏–∑–º–µ–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥?

**–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é:**

### üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**
```csharp
// –ù–æ–≤—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä
public class ModeratorUser : User
{
    public ModeratorUser(string name) : base(name) { }
    
    public void DeleteMessage(int messageId)
    {
        Console.WriteLine($"üóëÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {Name} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ #{messageId}");
    }
    
    public void WarnUser(string userName, string reason)
    {
        Console.WriteLine($"‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {Name} –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userName}: {reason}");
    }
    
    public override void Receive(string message, string senderName)
    {
        Console.WriteLine($"üõ°Ô∏è {Name} (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä) –≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {senderName}: {message}");
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
        if (ContainsSpam(message))
        {
            WarnUser(senderName, "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º");
        }
    }
}

// –ù–æ–≤—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
public class PremiumUser : User
{
    public List<string> CustomEmojis { get; private set; }
    
    public PremiumUser(string name) : base(name)
    {
        CustomEmojis = new List<string> { "üåü", "üíé", "üöÄ" };
    }
    
    public override void Receive(string message, string senderName)
    {
        string decoratedMessage = $"{GetRandomEmoji()} {message}";
        Console.WriteLine($"üíé {Name} (–ø—Ä–µ–º–∏—É–º) –ø–æ–ª—É—á–∏–ª: {decoratedMessage}");
    }
    
    private string GetRandomEmoji()
    {
        var random = new Random();
        return CustomEmojis[random.Next(CustomEmojis.Count)];
    }
}
```

### üîß **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–µ**
```csharp
class Program
{
    static void Main()
    {
        ChatRoom chat = new ChatRoom("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —á–∞—Ç");
        
        // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        RegularUser alice = new RegularUser("–ê–ª–∏—Å–∞");
        AdminUser admin = new AdminUser("–ê–¥–º–∏–Ω");
        
        // –ù–æ–≤—ã–µ —Ç–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –≤ ChatRoom!
        ModeratorUser mod = new ModeratorUser("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä");
        PremiumUser premium = new PremiumUser("–ü—Ä–µ–º–∏—É–º–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
        BotUser helperBot = new BotUser("–ü–æ–º–æ—â–Ω–∏–∫");
        
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
        chat.RegisterUser(alice);
        chat.RegisterUser(admin);
        chat.RegisterUser(mod);
        chat.RegisterUser(premium);
        chat.RegisterUser(helperBot);
        
        // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        alice.Send("–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!");
        mod.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!");
        premium.Send("–†–∞–¥ –±—ã—Ç—å –∑–¥–µ—Å—å! üíé");
    }
}
```

### üé≠ **–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –≤ –¥–µ–π—Å—Ç–≤–∏–∏**
```csharp
public class ChatRoom : IMediator
{
    private Dictionary<string, User> _users; // –•—Ä–∞–Ω–∏—Ç –õ–Æ–ë–´–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    public void RegisterUser(User user) // –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ì–û –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞ User
    {
        _users[user.Name] = user; // –ù–µ –≤–∞–∂–Ω–æ –∫–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø
        user.SetMediator(this);   // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
        
        // –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö
        BroadcastMessage($"{user.Name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É", null);
    }
}
```

## 3. –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π?

### üèóÔ∏è **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞**
```csharp
public interface IAdvancedMediator : IMediator
{
    void CreateGroup(string groupName, User creator);
    void JoinGroup(string groupName, User user);
    void LeaveGroup(string groupName, User user);
    void SendGroupMessage(string message, User sender, string groupName);
    void SendPrivateMessage(string message, User sender, string recipientName);
    List<string> GetUserGroups(string userName);
    List<string> GetGroupMembers(string groupName);
}

public class AdvancedChatRoom : IAdvancedMediator
{
    private Dictionary<string, User> _users;
    private Dictionary<string, List<string>> _groups; // groupName -> list of userNames
    private Dictionary<string, User> _groupAdmins;   // groupName -> admin User
    private List<PrivateChat> _privateChats;
    
    public AdvancedChatRoom(string roomName)
    {
        _users = new Dictionary<string, User>();
        _groups = new Dictionary<string, List<string>>();
        _groupAdmins = new Dictionary<string, User>();
        _privateChats = new List<PrivateChat>();
    }
}
```

### üë• **–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤**
```csharp
public class AdvancedChatRoom : IAdvancedMediator
{
    public void CreateGroup(string groupName, User creator)
    {
        if (_groups.ContainsKey(groupName))
            throw new InvalidOperationException($"–ì—Ä—É–ø–ø–∞ '{groupName}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        
        _groups[groupName] = new List<string> { creator.Name };
        _groupAdmins[groupName] = creator;
        
        Console.WriteLine($"üë• –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ '{groupName}', –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {creator.Name}");
        BroadcastMessage($"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ '{groupName}'", null);
    }
    
    public void JoinGroup(string groupName, User user)
    {
        if (!_groups.ContainsKey(groupName))
            throw new InvalidOperationException($"–ì—Ä—É–ø–ø–∞ '{groupName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        
        if (!_groups[groupName].Contains(user.Name))
        {
            _groups[groupName].Add(user.Name);
            SendGroupMessage($"{user.Name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ", user, groupName);
        }
    }
    
    public void SendGroupMessage(string message, User sender, string groupName)
    {
        if (!_groups.ContainsKey(groupName))
            throw new InvalidOperationException($"–ì—Ä—É–ø–ø–∞ '{groupName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        
        if (!_groups[groupName].Contains(sender.Name))
            throw new InvalidOperationException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ '{groupName}'");
        
        string formattedMessage = $"[–ì–†–£–ü–ü–ê {groupName}] {sender.Name}: {message}";
        
        foreach (var userName in _groups[groupName])
        {
            if (userName != sender.Name && _users.ContainsKey(userName))
            {
                _users[userName].Receive(formattedMessage, $"{sender.Name} ({groupName})");
            }
        }
        
        Console.WriteLine($"üë• {formattedMessage}");
    }
}
```

### üíå **–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è**
```csharp
public class AdvancedChatRoom : IAdvancedMediator
{
    public void SendPrivateMessage(string message, User sender, string recipientName)
    {
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!_users.ContainsKey(sender.Name) || !_users.ContainsKey(recipientName))
            throw new InvalidOperationException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        var privateChat = GetOrCreatePrivateChat(sender.Name, recipientName);
        privateChat.AddMessage(sender.Name, message);
        
        // –î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        _users[recipientName].ReceivePrivate(message, sender.Name);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        sender.ReceivePrivate($"(–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {recipientName}): {message}", "–°–∏—Å—Ç–µ–º–∞");
        
        Console.WriteLine($"üîí [–õ–°] {sender.Name} ‚Üí {recipientName}: {message}");
    }
    
    private PrivateChat GetOrCreatePrivateChat(string user1, string user2)
    {
        var chat = _privateChats.FirstOrDefault(pc => 
            (pc.User1 == user1 && pc.User2 == user2) || 
            (pc.User1 == user2 && pc.User2 == user1));
        
        if (chat == null)
        {
            chat = new PrivateChat(user1, user2);
            _privateChats.Add(chat);
        }
        
        return chat;
    }
    
    public List<string> GetPrivateChatHistory(string user1, string user2)
    {
        var chat = GetOrCreatePrivateChat(user1, user2);
        return chat.GetMessageHistory();
    }
}

public class PrivateChat
{
    public string User1 { get; }
    public string User2 { get; }
    private List<ChatMessage> _messages;
    
    public PrivateChat(string user1, string user2)
    {
        User1 = user1;
        User2 = user2;
        _messages = new List<ChatMessage>();
    }
    
    public void AddMessage(string sender, string message)
    {
        _messages.Add(new ChatMessage
        {
            Sender = sender,
            Message = message,
            Timestamp = DateTime.Now
        });
    }
    
    public List<string> GetMessageHistory()
    {
        return _messages.Select(m => $"[{m.Timestamp:HH:mm}] {m.Sender}: {m.Message}").ToList();
    }
}
```

### üéÆ **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞**
```csharp
class AdvancedChatDemo
{
    static void Main()
    {
        AdvancedChatRoom chat = new AdvancedChatRoom("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —á–∞—Ç");
        
        RegularUser alice = new RegularUser("–ê–ª–∏—Å–∞");
        RegularUser bob = new RegularUser("–ë–æ–±");
        RegularUser charlie = new RegularUser("–ß–∞—Ä–ª–∏");
        
        chat.RegisterUser(alice);
        chat.RegisterUser(bob);
        chat.RegisterUser(charlie);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
        chat.CreateGroup("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", alice);
        chat.CreateGroup("–î–∏–∑–∞–π–Ω–µ—Ä—ã", bob);
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–∞–º
        chat.JoinGroup("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", bob);
        chat.JoinGroup("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", charlie);
        chat.JoinGroup("–î–∏–∑–∞–π–Ω–µ—Ä—ã", alice);
        
        // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat.SendGroupMessage("–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!", alice, "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏");
        chat.SendGroupMessage("–ï—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É?", bob, "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏");
        
        // –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat.SendPrivateMessage("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", alice, "–ë–æ–±");
        chat.SendPrivateMessage("–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!", bob, "–ê–ª–∏—Å–∞");
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        var history = chat.GetPrivateChatHistory("–ê–ª–∏—Å–∞", "–ë–æ–±");
        Console.WriteLine("\n–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ê–ª–∏—Å–∞ ‚Üî –ë–æ–±:");
        foreach (var msg in history)
        {
            Console.WriteLine($"  {msg}");
        }
    }
}
```

–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:

1. –ü–æ—Å—Ä–µ–¥–Ω–∏–∫ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
2. –ù–æ–≤—ã–µ —Ç–∏–ø—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
3. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
4. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —á–µ—Ä–µ–∑ –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –≥–∏–±–∫–æ–π, —Ä–∞—Å—à–∏—Ä—è–µ–º–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π.
