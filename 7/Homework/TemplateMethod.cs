using System;
using System.Collections.Generic;

public abstract class Beverage
{
    public void PrepareRecipe()
    {
        Console.WriteLine($"\n=== –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ {GetBeverageName()} ===");
        
        BoilWater();
        Brew();
        PourInCup();
        
        if (CustomerWantsCondiments())
        {
            AddCondiments();
        }
        
        if (CustomerWantsExtraSteps())
        {
            PerformExtraSteps();
        }
        
        Serve();
        Console.WriteLine($"=== {GetBeverageName()} –≥–æ—Ç–æ–≤! ===\n");
    }

    protected virtual string GetBeverageName()
    {
        return "–ù–∞–ø–∏—Ç–æ–∫";
    }

    private void BoilWater()
    {
        Console.WriteLine("–ö–∏–ø—è—Ç–∏–º –≤–æ–¥—É");
    }

    protected abstract void Brew();

    private void PourInCup()
    {
        Console.WriteLine("–ù–∞–ª–∏–≤–∞–µ–º –≤ —á–∞—à–∫—É");
    }

    protected abstract void AddCondiments();

    protected virtual bool CustomerWantsCondiments()
    {
        return true;
    }

    protected virtual bool CustomerWantsExtraSteps()
    {
        return false;
    }

    protected virtual void PerformExtraSteps()
    {
    }

    protected virtual void Serve()
    {
        Console.WriteLine("–ü–æ–¥–∞–µ–º –Ω–∞–ø–∏—Ç–æ–∫");
    }
}

public class Tea : Beverage
{
    protected override string GetBeverageName()
    {
        return "–ß–∞–π";
    }

    protected override void Brew()
    {
        Console.WriteLine("ü´ñ –ó–∞–≤–∞—Ä–∏–≤–∞–µ–º —á–∞–π–Ω—ã–µ –ª–∏—Å—Ç—å—è");
    }

    protected override void AddCondiments()
    {
        Console.WriteLine("–î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–æ–Ω");
    }

    protected override bool CustomerWantsCondiments()
    {
        Console.Write("–î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–æ–Ω –≤ —á–∞–π? (y/n): ");
        string input = Console.ReadLine()?.ToLower() ?? "y";
        return input == "y" || input == "yes" || input == "–¥";
    }

    protected override bool CustomerWantsExtraSteps()
    {
        Console.Write("–°–¥–µ–ª–∞—Ç—å —á–∞–π —Å –º—è—Ç–æ–π? (y/n): ");
        string input = Console.ReadLine()?.ToLower() ?? "n";
        return input == "y" || input == "yes" || input == "–¥";
    }

    protected override void PerformExtraSteps()
    {
        Console.WriteLine("–î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ–∂—É—é –º—è—Ç—É");
    }
}

public class Coffee : Beverage
{
    private bool _withMilk;

    protected override string GetBeverageName()
    {
        return "–ö–æ—Ñ–µ";
    }

    protected override void Brew()
    {
        Console.WriteLine("–ó–∞–≤–∞—Ä–∏–≤–∞–µ–º –∫–æ—Ñ–µ –≤ —Ñ–∏–ª—å—Ç—Ä–µ");
    }

    protected override void AddCondiments()
    {
        if (_withMilk)
        {
            Console.WriteLine("–î–æ–±–∞–≤–ª—è–µ–º –º–æ–ª–æ–∫–æ –∏ —Å–∞—Ö–∞—Ä");
        }
        else
        {
            Console.WriteLine("–î–æ–±–∞–≤–ª—è–µ–º —Å–∞—Ö–∞—Ä");
        }
    }

    protected override bool CustomerWantsCondiments()
    {
        Console.Write("–î–æ–±–∞–≤–∏—Ç—å —Å–∞—Ö–∞—Ä –≤ –∫–æ—Ñ–µ? (y/n): ");
        string sugarInput = Console.ReadLine()?.ToLower() ?? "y";
        bool wantsSugar = sugarInput == "y" || sugarInput == "yes" || sugarInput == "–¥";

        if (wantsSugar)
        {
            Console.Write("–î–æ–±–∞–≤–∏—Ç—å –º–æ–ª–æ–∫–æ? (y/n): ");
            string milkInput = Console.ReadLine()?.ToLower() ?? "y";
            _withMilk = milkInput == "y" || milkInput == "yes" || milkInput == "–¥";
        }

        return wantsSugar;
    }

    protected override void Serve()
    {
        string servingStyle = _withMilk ? "–∫–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º" : "—á–µ—Ä–Ω—ã–π –∫–æ—Ñ–µ";
        Console.WriteLine($"–ü–æ–¥–∞–µ–º {servingStyle}");
    }
}

public class HotChocolate : Beverage
{
    private bool _withMarshmallows;
    private bool _withCinnamon;

    protected override string GetBeverageName()
    {
        return "–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥";
    }

    protected override void Brew()
    {
        Console.WriteLine("–†–∞—Å—Ç–≤–æ—Ä—è–µ–º —à–æ–∫–æ–ª–∞–¥ –≤ –≥–æ—Ä—è—á–µ–º –º–æ–ª–æ–∫–µ");
    }

    protected override void AddCondiments()
    {
        if (_withMarshmallows)
        {
            Console.WriteLine("–î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à–º–µ–ª–ª–æ—É");
        }
        
        if (_withCinnamon)
        {
            Console.WriteLine("–ü–æ—Å—ã–ø–∞–µ–º –∫–æ—Ä–∏—Ü–µ–π");
        }
    }

    protected override bool CustomerWantsCondiments()
    {
        Console.Write("–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à–º–µ–ª–ª–æ—É –≤ –≥–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥? (y/n): ");
        string marshmallowInput = Console.ReadLine()?.ToLower() ?? "y";
        _withMarshmallows = marshmallowInput == "y" || marshmallowInput == "yes" || marshmallowInput == "–¥";

        Console.Write("–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–∏—Ü—É? (y/n): ");
        string cinnamonInput = Console.ReadLine()?.ToLower() ?? "y";
        _withCinnamon = cinnamonInput == "y" || cinnamonInput == "yes" || cinnamonInput == "–¥";

        return _withMarshmallows || _withCinnamon;
    }

    protected override void Serve()
    {
        Console.WriteLine("–ü–æ–¥–∞–µ–º –≥–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥ —Å –ø–µ–Ω–Ω–æ–π —à–∞–ø–∫–æ–π");
    }
}

public class Espresso : Beverage
{
    protected override string GetBeverageName()
    {
        return "–≠—Å–ø—Ä–µ—Å—Å–æ";
    }

    protected override void Brew()
    {
        Console.WriteLine("–ì–æ—Ç–æ–≤–∏–º —ç—Å–ø—Ä–µ—Å—Å–æ –≤ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–µ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º");
    }

    protected override void AddCondiments()
    {
        Console.WriteLine("–ü–æ–¥–∞–µ–º —Å –¥–æ–ª—å–∫–æ–π –ª–∏–º–æ–Ω–∞ –∏ —Å–∞—Ö–∞—Ä–æ–º");
    }

    protected override bool CustomerWantsCondiments()
    {
        Console.Write("–≠—Å–ø—Ä–µ—Å—Å–æ –ø—Ä–∏–Ω—è—Ç–æ –ø–∏—Ç—å –±–µ–∑ –¥–æ–±–∞–≤–æ–∫. –í—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å? (y/n): ");
        string input = Console.ReadLine()?.ToLower() ?? "n";
        return input == "y" || input == "yes" || input == "–¥";
    }

    protected override void Serve()
    {
        Console.WriteLine("–ü–æ–¥–∞–µ–º —ç—Å–ø—Ä–µ—Å—Å–æ –≤ –º–∞–ª–µ–Ω—å–∫–æ–π —á–∞—à–∫–µ");
    }
}

public class Smoothie : Beverage
{
    private List<string> _fruits;

    public Smoothie()
    {
        _fruits = new List<string>();
    }

    protected override string GetBeverageName()
    {
        return "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏";
    }

    protected override void BoilWater()
    {
    }

    protected override void Brew()
    {
        Console.WriteLine("–°–º–µ—à–∏–≤–∞–µ–º —Ñ—Ä—É–∫—Ç—ã –≤ –±–ª–µ–Ω–¥–µ—Ä–µ:");
        foreach (var fruit in _fruits)
        {
            Console.WriteLine($"   - {fruit}");
        }
    }

    protected override void PourInCup()
    {
        Console.WriteLine "–ü–µ—Ä–µ–ª–∏–≤–∞–µ–º —Å–º—É–∑–∏ –≤ –≤—ã—Å–æ–∫–∏–π —Å—Ç–∞–∫–∞–Ω";
    }

    protected override void AddCondiments()
    {
        Console.WriteLine("–î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥ –∏ –π–æ–≥—É—Ä—Ç");
    }

    protected override bool CustomerWantsCondiments()
    {
        Console.Write("–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥ –∏ –π–æ–≥—É—Ä—Ç? (y/n): ");
        string input = Console.ReadLine()?.ToLower() ?? "y";
        return input == "y" || input == "yes" || input == "–¥";
    }

    protected override bool CustomerWantsExtraSteps()
    {
        return true;
    }

    protected override void PerformExtraSteps()
    {
        SelectFruits();
        AddIce();
    }

    private void SelectFruits()
    {
        Console.WriteLine("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä—É–∫—Ç—ã –¥–ª—è —Å–º—É–∑–∏ (–≤–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–∫–æ–Ω—á–∏—Ç—å):");
        
        while (true)
        {
            Console.Write("–§—Ä—É–∫—Ç: ");
            string fruit = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(fruit))
                break;
                
            _fruits.Add(fruit);
        }

        if (_fruits.Count == 0)
        {
            _fruits.Add("–±–∞–Ω–∞–Ω");
            _fruits.Add("–∫–ª—É–±–Ω–∏–∫–∞");
            Console.WriteLine("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä: –±–∞–Ω–∞–Ω, –∫–ª—É–±–Ω–∏–∫–∞");
        }
    }

    private void AddIce()
    {
        Console.Write("–î–æ–±–∞–≤–∏—Ç—å –ª–µ–¥? (y/n): ");
        string input = Console.ReadLine()?.ToLower() ?? "y";
        if (input == "y" || input == "yes" || input == "–¥")
        {
            Console.WriteLine("üßä –î–æ–±–∞–≤–ª—è–µ–º –∫—É–±–∏–∫–∏ –ª—å–¥–∞");
        }
    }

    protected override void Serve()
    {
        Console.WriteLine "–ü–æ–¥–∞–µ–º —Å–º—É–∑–∏ —Å —Å–æ–ª–æ–º–∏–Ω–∫–æ–π –∏ —É–∫—Ä–∞—à–µ–Ω–∏–µ–º";
    }
}

class BeverageProgram
{
    static void Main(string[] args)
    {
        Console.WriteLine("=== –ö–∞—Ñ–µ '–®–∞–±–ª–æ–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏' ===\n");

        Dictionary<string, Beverage> beverages = new Dictionary<string, Beverage>
        {
            ["1"] = new Tea(),
            ["2"] = new Coffee(),
            ["3"] = new HotChocolate(),
            ["4"] = new Espresso(),
            ["5"] = new Smoothie()
        };

        bool continueMaking = true;

        while (continueMaking)
        {
            Console.WriteLine("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:");
            Console.WriteLine("1 - –ß–∞–π");
            Console.WriteLine("2 - –ö–æ—Ñ–µ");
            Console.WriteLine("3 - –ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥");
            Console.WriteLine("4 - –≠—Å–ø—Ä–µ—Å—Å–æ");
            Console.WriteLine("5 - –§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏");
            Console.WriteLine("0 - –í—ã—Ö–æ–¥");
            Console.Write("–í–∞—à –≤—ã–±–æ—Ä: ");

            string choice = Console.ReadLine();

            if (choice == "0")
            {
                continueMaking = false;
                continue;
            }

            if (beverages.ContainsKey(choice))
            {
                try
                {
                    beverages[choice].PrepareRecipe();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞");
            }

            Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
            Console.Clear();
        }

        Console.WriteLine("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∫–∞—Ñ–µ!");
    }
}
